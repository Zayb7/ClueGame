package clueGame;

import java.util.*;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

public class GameSetupTests
{
	
	private ClueGame control;
	private Board board;
	
	//player cards
    private Card mustardCard;
    private Card whiteCard;
    private Card peacockCard;
    private Card scarletCard;
    private Card greenCard;
    private Card plumCard;
    
    //Room cards
    private Card diningRoomCard;
    private Card studyCard;
    private Card libraryCard;
    private Card ballroomCard;
    private Card kitchenCard;
    private Card hallCard;
    private Card conservatoryCard;
    
    //Weapon cards
    private Card candlestickCard;
    private Card revolverCard;
    private Card wrenchCard;
    private Card knifeCard;
    private Card pipeCard;
    private Card ropeCard;
    

    @Before
    public void setUp()
    {
    	board = new Board();
        control = new ClueGame(123, 6, board);
        
        //initialize all of the Person Cards
        whiteCard = new Card("Mrs. White", Card.CardType.PERSON);
        mustardCard = new Card("Colonel Mustard", Card.CardType.PERSON);
        plumCard = new Card("Professor Plum", Card.CardType.PERSON);
        peacockCard = new Card("Mrs. Peacock", Card.CardType.PERSON);
        greenCard = new Card("Mr. Green", Card.CardType.PERSON);
        scarletCard = new Card("Miss Scarlet", Card.CardType.PERSON);
        
        //initialize all of the Room Cards
        diningRoomCard = new Card("Dining Room", Card.CardType.ROOM);
        conservatoryCard = new Card("Conservatory", Card.CardType.ROOM);
        libraryCard = new Card("Library", Card.CardType.ROOM);
        ballroomCard = new Card("Ballroom", Card.CardType.ROOM);
        kitchenCard = new Card("Kitchen", Card.CardType.ROOM);
        hallCard = new Card("Hall", Card.CardType.ROOM);
        studyCard = new Card("Study", Card.CardType.ROOM);
        
        //initialize all of the Weapon Cards
        candlestickCard = new Card("Candlestick", Card.CardType.WEAPON);
        revolverCard = new Card("Revolver", Card.CardType.WEAPON);
        wrenchCard = new Card("Wrench", Card.CardType.WEAPON);
        knifeCard = new Card("Knife", Card.CardType.WEAPON);
        pipeCard = new Card("Lead Pipe", Card.CardType.WEAPON);
        ropeCard = new Card("Rope", Card.CardType.WEAPON);
    }

    @Test
    public void testDeal()
    {
        ArrayList<Player> players = control.getPlayers();
        int totalNumCards = 0;
        Set<Card> allCards = new HashSet<Card>();
        for(Player p: players) {
            totalNumCards += p.getMyCards().size();
            for (Card card: p.getMyCards()) {
            	allCards.add(card);
            }    	
        }

        totalNumCards += control.getHuman().getMyCards().size();
        for(Card card: control.getHuman().getMyCards()){
        	allCards.add(card);
        }

        Assert.assertEquals(totalNumCards, 19);
        Assert.assertEquals(allCards.size(), 19);
        int totHumanCards = control.getHuman().getMyCards().size();

        for(Player player: players)
        	Assert.assertTrue(player.getMyCards().size() == totHumanCards || player.getMyCards().size() == totHumanCards + 1 || player.getMyCards().size() == totHumanCards - 1);
    }

    
}